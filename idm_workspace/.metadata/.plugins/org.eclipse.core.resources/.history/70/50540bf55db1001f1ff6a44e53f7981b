package calcul.validation;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;

import calcul.util.CalculSwitch;
import calcul.*;

/**
 * Réalise la validation d'un EObject issu de SimplePDL (en théorie, d'un process).
 * Cet classe visite le modèle et utilise les caseXXX pour rediriger l'algo vers la
 * bonne méthode.
 * Attention, lorsqu'une classe est un parent il faut aller faire la visite des enfants
 * manuellement (cf. caseProcess typiquement).
 * 
 * La classe Switch exige un paramètre de généricité (et gère une partie de la visite à
 * base de comparaison à null). Ici le paramètre est un booléen mais en réalité on ne
 * s'en sert pas...
 * 
 * @author Guillaume Dupont
 * @version 0.1
 */
public class CalculateurValidator extends CalculSwitch<Boolean> {
	/**
	 * Expression régulière qui correspond à un identifiant bien formé.
	 */
	private static final String IDENT_REGEX = "^[A-Za-z_][A-Za-z0-9_]*$";
	
	/**
	 * Résultat de la validation (état interne réinitialisé à chaque nouvelle validation).
	 */
	private ValidationResult result = null;
	
	/**
	 * Construire un validateur
	 */
	public CalculateurValidator() {}
	
	/**
	 * Lancer la validation et compiler les résultats dans un ValidationResult.
	 * Cette méthode se charge de créer un résultat de validation vide puis de
	 *  visiter les process présents dans la ressource.
	 * @param resource resource à valider
	 * @return résultat de validation
	 */
	public ValidationResult validate(Resource resource) {
		this.result = new ValidationResult();
		
		for (EObject object : resource.getContents()) {
			this.doSwitch(object);
		}
		
		return this.result;
	}


	/**
	 * Méthode appelée lorsque l'objet visité est un Process.
	 * Cet méthode amorce aussi la visite des éléments enfants.
	 * @param object élément visité
	 * @return résultat de validation (null ici, ce qui permet de poursuivre la visite
	 * vers les classes parentes, le cas échéant)
	 */
	@Override
	public Boolean caseUnCalcul(calcul.UnCalcul object) {
		// Contraintes sur process
		this.result.recordIfFailed(
				object.getName() != null && object.getName().matches(IDENT_REGEX), 
				object, 
				"Le nom du process ne respecte pas les conventions Java");
		
		// Visite
		for (CalculElement ce : object.getCalculElements()) {
			this.doSwitch(ce);
		}
		
		return null;
	}

	/**
	 * Méthode appelée lorsque l'objet visité est un ProcessElement (ou un sous type).
	 * @param object élément visité
	 * @return résultat de validation (null ici, ce qui permet de poursuivre la visite
	 * vers les classes parentes, le cas échéant)
	 */
	@Override
	public Boolean caseProcessElement(ProcessElement object) {
		return null;
	}

	/**
	 * Méthode appelée lorsque l'objet visité est une WorkDefinition.
	 * @param object élément visité
	 * @return résultat de validation (null ici, ce qui permet de poursuivre la visite
	 * vers les classes parentes, le cas échéant)
	 */
	@Override
	public Boolean caseWorkDefinition(WorkDefinition object) {
	    // Contraintes sur le nom de l'activité
	    this.result.recordIfFailed(
	            object.getName() != null && object.getName().matches(IDENT_REGEX), 
	            object, 
	            "Le nom de l'activité ne respecte pas les conventions Java : il doit commencer par une lettre ou un souligné et ne contenir que des lettres, chiffres ou soulignés.");

	    // Le nom de l'activité doit contenir au moins deux caractères
	    this.result.recordIfFailed(
	            object.getName().length() >= 2, 
	            object, 
	            "Le nom de l'activité doit contenir au moins deux caractères.");

	    // Unicité des noms des activités dans un même processus
	    this.result.recordIfFailed(
	            object.getProcess().getProcessElements().stream()
	                .filter(p -> p.eClass().getClassifierID() == SimplepdlPackage.WORK_DEFINITION)
	                .allMatch(pe -> (pe.equals(object) || !((WorkDefinition) pe).getName().equals(object.getName()))),
	            object, 
	            "Le nom de l'activité (" + object.getName() + ") n'est pas unique au sein du processus.");
	    
	    
	    return null;
	}
