-- @path SimplePDL=/SimplePDL/SimplePDL.ecore
-- @path TM=/TaskMaster/TaskMaster.ecore

module taskmaster;
create OUT : TM from IN : SimplePDL;

rule Process2EventBundle {
	from process : SimplePDL!Process
	to bundle : TM!EventBundle(name <- process.name)
}

helper context SimplePDL!ProcessElement
def: getProcess() : SimplePDL!Process =
	SimplePDL!Process.allInstances()->select(e | e.processElements->includes(self));

rule WD2Task {
	from wd : SimplePDL!WorkDefinition
	to
		event_start : TM!Event(bundle <- wd.getProcess(), name <- wd.name + '_start'),
		event_finish: TM!Event(bundle <- wd.getProcess(), name <- wd.name + '_finish'),
		finish_after_start: TM!Causal(event <- event_finish, target <- event_start)
}

rule WS2Requirement {
	from ws : SimplePDL!WorkSequence
	to req : TM!Causal(
		event <- thisModule.resolveTemp(ws.successor, 'event_' +
			(if ws.linkType = #s2s or ws.linkType = #f2s then
				'start'
			else
				'finish'
			endif)),
		event <- thisModule.resolveTemp(ws.predecessor, 'event_' +
			(if ws.linkType = #s2f or ws.linkType = #s2s then
				'start'
			else
				'finish'
			endif)))